{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CommentService {\n  constructor(http) {\n    this.http = http;\n    this.pr = 'https://jsonplaceholder.typicode.com/comments';\n  }\n  // Obtener todos los comentarios\n  getComments() {\n    const url = `${this.apiUrl}`;\n    return this.http.get(url);\n  }\n  // Obtener un comentario por su ID\n  getCommentById(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get(url);\n  }\n  // Crear un nuevo comentario\n  createComments(comment) {\n    const url = `${this.apiUrl}`;\n    return this.http.post(url, comment);\n  }\n  // Eliminar un comentario por su ID\n  deleteComment(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete(url);\n  }\n}\n_class = CommentService;\n_class.ɵfac = function CommentService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["CommentService","constructor","http","pr","getComments","url","apiUrl","get","getCommentById","id","createComments","comment","post","deleteComment","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\p\\ub\\src\\app\\comments\\comments.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient,HttpErrorResponse } from '@angular/common/http';\nimport { Observable, catchError } from 'rxjs';\nimport { Comments } from './comments'; // Cambiar 'Comments' a 'Comment'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentService {\n  pr = 'https://jsonplaceholder.typicode.com/comments';\n\n  constructor(private http: HttpClient) { }\n\n  // Obtener todos los comentarios\n  getComments(): Observable<Comment[]> {\n    const url = `${this.apiUrl}`;\n    return this.http.get<Comment[]>(url);\n  }\n\n  // Obtener un comentario por su ID\n  getCommentById(id: number): Observable<Comment> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get<Comment>(url);\n  }\n\n  // Crear un nuevo comentario\n  createComments(comment: Comments): Observable<Comment> {\n    const url = `${this.apiUrl}`;\n    return this.http.post<Comment>(url, comment);\n  }\n\n  // Eliminar un comentario por su ID\n  deleteComment(id: number): Observable<any> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete(url);\n  }\n}"],"mappings":";;;AAQA,OAAM,MAAOA,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,EAAE,GAAG,+CAA+C;EAEZ;EAExC;EACAC,WAAWA,CAAA;IACT,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,EAAE;IAC5B,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAYF,GAAG,CAAC;EACtC;EAEA;EACAG,cAAcA,CAACC,EAAU;IACvB,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,IAAIG,EAAE,EAAE;IAClC,OAAO,IAAI,CAACP,IAAI,CAACK,GAAG,CAAUF,GAAG,CAAC;EACpC;EAEA;EACAK,cAAcA,CAACC,OAAiB;IAC9B,MAAMN,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,EAAE;IAC5B,OAAO,IAAI,CAACJ,IAAI,CAACU,IAAI,CAAUP,GAAG,EAAEM,OAAO,CAAC;EAC9C;EAEA;EACAE,aAAaA,CAACJ,EAAU;IACtB,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACC,MAAM,IAAIG,EAAE,EAAE;IAClC,OAAO,IAAI,CAACP,IAAI,CAACY,MAAM,CAACT,GAAG,CAAC;EAC9B;;SA3BWL,cAAc;;mBAAdA,MAAc,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAdlB,MAAc;EAAAmB,OAAA,EAAdnB,MAAc,CAAAoB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}