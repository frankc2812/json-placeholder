{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CommentService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://jsonplaceholder.typicode.com/comments';\n  }\n  // Obtener todos los comentarios\n  getComments() {\n    const url = `${this.apiUrl}/comments`;\n    return this.http.get(url);\n  }\n  // Obtener un comentario por su ID\n  getCommentById(id) {\n    const url = `${this.apiUrl}/comments/${id}`;\n    return this.http.get(url);\n  }\n  // Crear un nuevo comentario\n  createComment(comment) {\n    const url = `${this.apiUrl}/comments`;\n    return this.http.post(url, comment);\n  }\n  // Eliminar un comentario por su ID\n  deleteComment(id) {\n    const url = `${this.apiUrl}/comments/${id}`;\n    return this.http.delete(url);\n  }\n}\n_class = CommentService;\n_class.ɵfac = function CommentService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["CommentService","constructor","http","apiUrl","getComments","url","get","getCommentById","id","createComment","comment","post","deleteComment","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\p\\ub\\src\\app\\comments\\comments.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Comments } from './users';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentService {\n  private apiUrl = 'https://jsonplaceholder.typicode.com/comments';\n\n  constructor(private http: HttpClient) { }\n\n  // Obtener todos los comentarios\n  getComments(): Observable<Comment[]> {\n    const url = `${this.apiUrl}/comments`;\n    return this.http.get<Comment[]>(url);\n  }\n\n  // Obtener un comentario por su ID\n  getCommentById(id: number): Observable<Comment> {\n    const url = `${this.apiUrl}/comments/${id}`;\n    return this.http.get<Comment>(url);\n  }\n\n  // Crear un nuevo comentario\n  createComment(comment: Comment): Observable<Comment> {\n    const url = `${this.apiUrl}/comments`;\n    return this.http.post<Comment>(url, comment);\n  }\n\n  // Eliminar un comentario por su ID\n  deleteComment(id: number): Observable<any> {\n    const url = `${this.apiUrl}/comments/${id}`;\n    return this.http.delete(url);\n  }\n}\n"],"mappings":";;;AAOA,OAAM,MAAOA,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,+CAA+C;EAExB;EAExC;EACAC,WAAWA,CAAA;IACT,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,WAAW;IACrC,OAAO,IAAI,CAACD,IAAI,CAACI,GAAG,CAAYD,GAAG,CAAC;EACtC;EAEA;EACAE,cAAcA,CAACC,EAAU;IACvB,MAAMH,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,aAAaK,EAAE,EAAE;IAC3C,OAAO,IAAI,CAACN,IAAI,CAACI,GAAG,CAAUD,GAAG,CAAC;EACpC;EAEA;EACAI,aAAaA,CAACC,OAAgB;IAC5B,MAAML,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,WAAW;IACrC,OAAO,IAAI,CAACD,IAAI,CAACS,IAAI,CAAUN,GAAG,EAAEK,OAAO,CAAC;EAC9C;EAEA;EACAE,aAAaA,CAACJ,EAAU;IACtB,MAAMH,GAAG,GAAG,GAAG,IAAI,CAACF,MAAM,aAAaK,EAAE,EAAE;IAC3C,OAAO,IAAI,CAACN,IAAI,CAACW,MAAM,CAACR,GAAG,CAAC;EAC9B;;SA3BWL,cAAc;;mBAAdA,MAAc,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAdjB,MAAc;EAAAkB,OAAA,EAAdlB,MAAc,CAAAmB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}